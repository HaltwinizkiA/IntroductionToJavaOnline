1. Опишите процедуру инициализации полей класса и полей экземпляра класса. Когда инициализируются поля класса,
а когда – поля экземпляров класса. Какие значения присваиваются полям по умолчанию? Где еще в классе полям
могут быть присвоены начальные значения?
-в конструкторе.
- поля класса class Cat {                   .cылочным типом -null ;char="",boleen -false; остальным 0.
     String name="barsik";
     int age=10;
 }
 -экземляр
 Cat cat=new Cat;
 cat.age=12;
 cat.name="nebarsik";

2. Дайте определение перегрузке методов. Как вы думаете, чем удобна перегрузка методов? Укажите, какие методы
могут перегружаться, и какими методами они могут быть перегружены? Можно ли перегрузить методы в базовом и
производном классах? Можно ли private метод базового класса перегрузить public методов производного? Можно ли
перегрузить конструкторы, и можно ли при перегрузке конструкторов менять атрибуты доступа у конструкторов?

-перегрузка методов-существует несколько его версий с одним и тем же именем, но с различным списком параметров..
-Например нужно сделать одну и ту же операцию с разными типами данных.
-статические методы могут перегружаться нестатическими и наоборот.
-да.
-нельзя
-да можно

3. Объясните, что такое раннее и позднее связывание? Перегрузка – это раннее или позднее связывание? Объясните
правила, которым следует компилятор при разрешении перегрузки; в том числе, если методы перегружаются
примитивными типами, между которыми возможно неявное приведение или ссылочными типами, состоящими в
иерархической связи.
-Связывание означает наличие связи между ссылкой и кодом.ранее- вызов метода связан с телом метода во время компиляции.
поздее-вызов метода связан с телом метода во время выполнения.
-ранее.
-
-

4. Объясните, как вы понимаете, что такое неявная ссылка this? В каких методах эта ссылка присутствует, а в каких –
нет, и почему?
- this указатель на сам объект c его помощью метод класса определяет, с данными какого объекта ему предстоит работать.
-(для указания на перемую объекта.)
-в методах в которых изменяется поле класса.(setter)

5. Что такое финальные поля, какие поля можно объявить со спецификатором final? Где можно инициализировать
финальные поля?
-final неизменяемая.
-любую переменную.класс.метод
-

6. Что такое статические поля, статические финальные поля и статические методы. К чему имеют доступ статические
методы? Можно ли перегрузить и переопределить статические методы? Наследуются ли статические методы?
-статик неизменяемая (общаяя)переменная или метод объекта.
-статические методы ко всему статическому).
-нельзя переопределить.можно перегрузить
-не наследуются.

7. Что такое логические и статические блоки инициализации? Сколько их может быть в классе, в каком порядке они
могут быть размещены и в каком порядке вызываются?
-Логическим блоком называется код, заключенный в фигурные скобки и не принадлежащий ни одному методу текущего класса.
-много...
-вызывается  последовательно в порядке размещения до вызова конструктора класса.
-статический -до статических методов.

8. Что представляют собой методы с переменным числом параметров, как передаются параметры в такие методы и что
представляет собой такой параметр в методе? Как осуществляется выбор подходящего метода, при использовании
перегрузки для методов с переменным числом параметров?
-параметры передаются в конструкторе через запятую.
-параемтр=массив;
-правильно_)

9. Чем является класс Object? Перечислите известные вам методы класса Object, укажите их назначение.
-в козяве все классы наследуются от Object.
-toString(),equals,hashCode,getClass,clone,
-переопределяет в строку.сравнение по хэшкоду,cравнение полное.Возвращает объект который описывает этот класс.копирование

10. Что такое хэш-значение? Объясните, почему два разных объекта могут сгенерировать одинаковые хэш-коды?
-число генерируемое на основе конкретного объекта.с помощью метода hashCode().
- метод возвращает int а этот примитив имеет ограничение.

11. Что такое объект класса Class? Чем использование метода getClass() и последующего сравнения возвращенного
значения с Type.class отличается от использования оператора instanceof?
-дженерик)
-getclass== type.class-проверяет идентичны ли типы.
-instanceof проверяет был ли объект создан на основе класса.

12. Укажите правила переопределения методов equals(), hashCode() и toString()
-Рефлексивность: Объект должен равняться себе самому.
-Симметричность: если a.equals(b) возвращает true, то b.equals(a) должен тоже вернуть true.
-Транзитивность: если a.equals(b) возвращает true и b.equals(c) тоже возвращает true, то c.equals(a) тоже должен возвращать true.
-Согласованность: повторный вызов метода equals() должен возвращать одно и тоже значение до тех пор,
пока какое-либо значение свойств объекта не будет изменено. То есть, если два объекта равны в Java,
 то они будут равны пока их свойства остаются неизменными.
-Сравнение null: объект должны быть проверен на null.
Если объект равен null, то метод должен вернуть false, а не NullPointerException.
Например, a.equals(null) должен вернуть false.