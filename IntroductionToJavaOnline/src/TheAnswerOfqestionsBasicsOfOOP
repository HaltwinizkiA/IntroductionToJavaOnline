1. Дайте развернутое объяснение трем концепциям ООП.

2. Опишите процедуру инициализации полей класса и полей экземпляра класса. Когда инициализируются поля класса, а
когда – поля экземпляров класса. Какие значения присваиваются полям по умолчанию? Где еще в классе полям могут быть
присвоены начальные значения?
-в конструкторе.
- поля класса class Cat {                   .cылочным типом -null ;char="",boleen -false; остальным 0.
     String name="barsik";
     int age=10;
 }
 -экземляр
 Cat cat=new Cat;
 cat.age=12;
 cat.name="nebarsik";

3. Приведите правила, которым должен следовать компонент java-bean.
-
-

4. Дайте определение перегрузке методов. Как вы думаете, чем удобна перегрузка методов? Укажите, какие методы могут
перегружаться, и какими методами они могут быть перегружены? Можно ли перегрузить методы в базовом и производном
классах? Можно ли private метод базового класса перегрузить public методов производного? Можно ли перегрузить
конструкторы, и можно ли при перегрузке конструкторов менять атрибуты доступа у конструкторов?
-перегрузка методов-существует несколько его версий с одним и тем же именем, но с различным списком параметров..
-Например нужно сделать одну и ту же операцию с разными типами данных.
-статические методы могут перегружаться нестатическими и наоборот.
-да.
-нельзя
-да можно

5. Объясните, что такое раннее и позднее связывание? Перегрузка – это раннее или позднее связывание? Объясните правила,
которым следует компилятор при разрешении перегрузки; в том числе, если методы перегружаются примитивными
типами, между которыми возможно неявное приведение или ссылочными типами, состоящими в иерархической связи.
-Связывание означает наличие связи между ссылкой и кодом.ранее- вызов метода связан с телом метода во время компиляции.
 Делается с помощью статических, частных и, окончательных методов.
поздее-связывании вызов метода связан с телом метода во время выполнения.
Делается с помощью методов экземпляра
-ранее.
-
-

6. Объясните, как вы понимаете, что такое неявная ссылка this? В каких методах эта ссылка присутствует, а в каких – нет, и
почему?
- this указатель на сам объект c его помощью метод класса определяет, с данными какого объекта ему предстоит работать.
-(для указания на перемую объекта.)
-в методах в которых изменяется поле класса.(setter)

7. Что такое финальные поля, какие поля можно объявить со спецификатором final? Где можно инициализировать
финальные поля?
-final неизменяемая.
-любую переменную.класс.метод

8. Что такое статические поля, статические финальные поля и статические методы. К чему имеют доступ статические
методы? Можно ли перегрузить и переопределить статические методы? Наследуются ли статические методы?
-статик неизменяемая (общаяя)переменная или метод объекта.
-статические методы ко всему статическому).
-нельзя переопределить.можно перегрузить
-не наследуются.


9. Что такое логические и статические блоки инициализации? Сколько их может быть в классе, в каком порядке они могут
быть размещены и в каком порядке вызываются?
-Логическим блоком называется код, заключенный в фигурные скобки и не принадлежащий ни одному методу текущего класса.
-много...
-вызывается  последовательно в порядке размещения до вызова конструктора класса.
-статический -до статических методов.

10. Что представляют собой методы с переменным числом параметров, как передаются параметры в такие методы и что
представляет собой такой параметр в методе? Как осуществляется выбор подходящего метода, при использовании
перегрузки для методов с переменным числом параметров?
-параметры передаются в конструкторе через запятую.
-параемтр=массив;
-правильно_)


11. Чем является класс Object? Перечислите известные вам методы класса Object, укажите их назначение.
-в козяве все классы наследуются от Object.
-toString(),equals,hashCode,getClass,clone,
-переопределяет в строку.сравнение по хэшкоду,cравнение полное.Возвращает объект который описывает этот класс.копирование

12. Что такое хэш-значение? Объясните, почему два разных объекта могут сгенерировать одинаковые хэш-коды?
-число генерируемое на основе конкретного объекта.с помощью метода hashCode().
- метод возвращает int а этот примитив имеет ограничение.

13. Как вы думаете, для чего используется наследование классов в java-программе? Приведите пример наследования. Как
вы думаете, поля и методы, помеченными модификатором доступа private, наследуются?
-наследование для использования кода одного класса в другом классе.
-НЕТ.

14. Укажите, как вызываются конструкторы при создании объекта производного класса? Что в конструкторе класса делает
оператор super()? Возможно ли в одном конструкторе использовать операторы super() и this()?
- через оператор super(поле конструктора);
-можно;
-да можно;

15. Объясните, как вы понимаете утверждения: “ссылка базового класса может ссылаться на объекты своих производных
типов” и “объект производного класса может быть использован везде, где ожидается объект его базового типа”. Верно
ли обратное и почему?
-не верно;
можно только при преобразовании типа

16. Что такое переопределение методов? Как вы думаете, зачем они нужны? Можно ли менять возвращаемый тип при
переопределении методов? Можно ли менять атрибуты доступа при переопределении методов? Можно ли переопределить
методы в рамках одного класса?
-в производном классе изменить  уже реализованный в суперклассе метод.
-нельзя
-нельзя
-нельзя

17. Определите правило вызова переопределенных методов. Можно ли статические методы переопределить нестатическими
и наоборот?
-название, и возвращаемый тип, и принимаемый тип не меняются.
-нельзя;
18. Какие свойства имеют финальные методы и финальные классы? Как вы думаете, зачем их использовать?
-класс финал нельзя наследовать-методы нельзя перепоределить.Для задачи в которой какая-то часть должна быть строго неизменной.

19. Укажите правила приведения типов при наследовании. Напишите примеры явного и неявного преобразования ссылочных
типов. Объясните, какие ошибки могут возникать при явном преобразовании ссылочных типов.
-
-
20. Что такое объект класса Class? Чем использование метода getClass() и последующего сравнения возвращенного значения
с Type.class отличается от использования оператора instanceof?
-
21. Укажите правила переопределения методов equals(), hashCode() и toString().
-Рефлексивность: Объект должен равняться себе самому.
 -Симметричность: если a.equals(b) возвращает true, то b.equals(a) должен тоже вернуть true.
 -Транзитивность: если a.equals(b) возвращает true и b.equals(c) тоже возвращает true, то c.equals(a) тоже должен возвращать true.
 -Согласованность: повторный вызов метода equals() должен возвращать одно и тоже значение до тех пор,
 пока какое-либо значение свойств объекта не будет изменено. То есть, если два объекта равны в Java,
  то они будут равны пока их свойства остаются неизменными.
 -Сравнение null: объект должны быть проверен на null.
 Если объект равен null, то метод должен вернуть false, а не NullPointerException.
 Например, a.equals(null) должен вернуть false.



22. Что такое абстрактные классы и методы? Зачем они нужны? Бывают ли случаи, когда абстрактные методы содержат тело?
Можно ли в абстрактных классах определять конструкторы? Могут ли абстрактные классы содержать неабстрактные
методы? Можно ли от абстрактных классов создавать объекты и почему?
-
23. Что такое интерфейсы? Как определить и реализовать интерфейс в java-программе? Укажите спецификаторы, которые
приобретают методы и поля, определенные в интерфейсе. Можно ли описывать в интерфейсе конструкторы и создавать
объекты? Можно ли создавать интерфейсные ссылки и если да, то на какие объекты они могут ссылаться?
-
24. Для чего служит интерфейс Clonable? Как правильно переопределить метод clone() класса Object, для того, что объект
мог создавать свои адекватные копии?
-
25. Для чего служат интерфейсы Comparable и Comparator? В каких случаях предпочтительнее использовать первый, а когда
– второй? Как их реализовать и использовать?
-для сравнения объектов.первый в случае одного измения .второй для разных версий.
-comparable имплиметится в класс. для comporatora создается отдельный класс.

Generic classes and Interfaces, Enums
1. Что такое перечисления в Java. Как объявить перечисление? Чем являются элементы перечислений? Кто и когда создает
экземпляры перечислений?
-
2. Можно ли самостоятельно создать экземпляр перечисления? А ссылку типа перечисления? Как сравнить, что в двух
переменных содержится один и тот же элемент перечисления и почему именно так?
3. Что такое анонимные классы?
4. Что такое параметризованные классы? Для чего они необходимы? Приведите пример параметризованного класса и пример
создания объекта параметризованного класса? Объясните, ссылки какого типа могут ссылаться на объекты
параметризованных классов? Можно ли создать объект, параметризовав его примитивным типом данных?
Exceptions and Errors
1. Что для программы является исключительной ситуацией? Какие способы обработки ошибок в программах вы знаете?
2. Что такое исключение для Java-программы? Что значит “программа выбросила исключение”? Опишите ситуации, когда
исключения выбрасываются виртуальной машиной(автоматически), и когда необходимо их выбрасывать вручную?
3. Приведите иерархию классов-исключений, делящую исключения на проверяемые и непроверяемые. В чем особенности
проверяемых и непроверяемых исключений?
4. Объясните работу оператора try-catch-finally. Когда данный оператор следует использовать? Сколько блоков catch может
соответствовать одному блоку try? Можно ли вкладывать блоки try друг в друга, можно ли вложить блок try в catch или
finally? Как происходит обработка исключений, выброшенных внутренним блоком try, если среди его блоков catch нет
подходящего? Что называют стеком операторов try? Как работает блок try с ресурсами.
5. Укажите правило расположения блоков catch в зависимости от типов перехватываемых исключений. Может ли
перехваченной исключение быть сгенерировано снова, и, если да, то как и кто в этом случае будет обрабатывать повторно
сгенерированное исключение? Может ли блок catch выбрасывать иные исключения, и если да, то опишите ситуацию, когда
это может быть необходимо.
6. Когда происходит вызов блока finally? Существуют ли ситуации, когда блок finally не будет вызван? Может ли блок finally
выбрасывать исключений? Может ли блок finally выполнится дважды?